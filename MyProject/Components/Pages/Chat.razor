@page "/Home/Chat/{userId}/{chatToId}"

@using MyProject.Context
@using MyProject.Model;
@using Microsoft.AspNetCore.Http @*For retrieving client ID*@
@using Microsoft.AspNetCore.Identity @*For retrieving client ID*@
@using Microsoft.AspNetCore.Components.Authorization @*Page only accessible by those authorized*@
@inherits LayoutComponentBase

@inject PostProvider postProvider
@inject PostCommentProvider postCommentProvider
@inject UserManager<User> userManager
@inject IHttpContextAccessor httpContextAccessor

<p class="custom-primary-white-text-color">User ID: @userId</p>
<p class="custom-primary-white-text-color">Chat To ID: @chatToId</p>

@code {
    public User userNameObj = new User();
    public User chatToNameObj = new User();
    public User UserObj = new User();

    [Parameter]
    public string userId { get; set; }

    [Parameter]
    public string chatToId { get; set; }


    protected override async Task OnInitializedAsync()
    {
        userNameObj = await userManager.FindByIdAsync(userId);
        chatToNameObj = await userManager.FindByIdAsync(chatToId);

        var context = httpContextAccessor.HttpContext; //instead of making multiple requests, make one request

        if (context != null && context.User.Identity != null && context.User.Identity.IsAuthenticated)
        {
            var currentUser = await userManager.GetUserAsync(context.User); //userManager is responsible for information based on a user, getuserasync retrives information basied off of context.User as it represents the authenticated user

            if (currentUser != null)
            {
                UserObj = currentUser;
            }
        }

    }

    private async Task RetrieveTexts()
    {
    }

}