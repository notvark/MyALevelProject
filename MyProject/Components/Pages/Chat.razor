@page "/Home/Chat/{userId}/{chatToId}"

@using MyProject.Context
@using MyProject.Model;
@using Microsoft.AspNetCore.Http @*For retrieving client ID*@
@using Microsoft.AspNetCore.Identity @*For retrieving client ID*@
@using Microsoft.AspNetCore.Components.Authorization @*Page only accessible by those authorized*@
@inherits LayoutComponentBase

@inject PostProvider postProvider
@inject PostCommentProvider postCommentProvider
@inject UserManager<User> userManager
@inject ChatProvider chatProvider
@inject IHttpContextAccessor httpContextAccessor

<div class="card shadow-lg border-0 mt-4" style="background-color: #343a40; color: white;">

    <div class="card-header bg-secondary text-white">
        <i class="fa-solid fa-message"></i>
        @chatToNameObj.UserName
    </div>

    @if (newChat)
    {
        <div class="card-body custom-primary-background-color">
            <div>
                <p class="card-text text-muted" style="color: #adb5bd !important;">No messages yet. Start a conversation!</p>
            </div>
        </div>
    }

    <div class="card-body custom-primary-background-color">
        @foreach (var message in chatMessages)
        {
            <div class="d-flex mb-2 @(message.FromUserId == userNameObj.Id ? "justify-content-end" : "justify-content-start")">
                <div class="p-2 rounded back"
                     style="background-color: @(message.FromUserId == userNameObj.Id ? "#007bff" : "#6c757d"); color: white;">

                    <span>@message.Message</span>
                    <br />
                    <div class="d-flex justify-content-between align-items-center">
                        @*Place the time and delete button in same div*@
                        <small class="text-muted">@message.SentDateTime.ToLocalTime().ToString("g")</small>
                        @if (message.FromUserId == userNameObj.Id)
                        {
                            <button class="btn btn-danger btn-sm ms-2"
                                    @onclick="() => DeleteMessage(message)" style="align-self: flex-start;">
                                @*bottom right*@
                                Delete
                            </button>
                        }
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="card-footer">
        <EditForm Model="@chatObj" OnValidSubmit="@SendMessage">
            <div class="d-flex">
                <input type="text" class="form-control me-2" @bind="chatObj.Message"
                       placeholder="Type your message here..." />
                <button type="submit" class="btn btn-primary w-25">
                    <i class="far fa-paper-plane" aria-hidden="true"></i>
                </button>
            </div>
        </EditForm>
    </div>

</div>

@if (emptyMessage == true)
{
    <div class="alert alert-danger alert-dismissible show mt-2" role="alert">
        <i class="fas fa-exclamation-circle me-2"></i> Message cannot be empty.
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}





@code {
    public User userNameObj = new User();
    public User chatToNameObj = new User();
    public User UserObj = new User();
    private MyProject.Model.Chat chatObj = new MyProject.Model.Chat();

    private List<MyProject.Model.Chat> chatMessages;

    private bool newChat = true;
    private bool emptyMessage = false;

    [Parameter]
    public string userId { get; set; }

    [Parameter]
    public string chatToId { get; set; }


    protected override async Task OnInitializedAsync()
    {
        userNameObj = await userManager.FindByIdAsync(userId);
        chatToNameObj = await userManager.FindByIdAsync(chatToId);

        chatMessages = await chatProvider.RetrieveTextsOrdered(userNameObj, chatToNameObj);

        if (chatMessages.Count == 0)
        {
            newChat = true;
        }
        else
        {
            newChat = false;
        }

        var context = httpContextAccessor.HttpContext; //instead of making multiple requests, make one request

        if (context != null && context.User.Identity != null && context.User.Identity.IsAuthenticated)
        {
            var currentUser = await userManager.GetUserAsync(context.User); //userManager is responsible for information based on a user, getuserasync retrives information basied off of context.User as it represents the authenticated user

            if (currentUser != null)
            {
                UserObj = currentUser;
            }
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(chatObj.Message))
        {
            emptyMessage = true;
            return;
        }

        emptyMessage = false;

        chatObj.FromUserId = userNameObj.Id;
        chatObj.ToUserId = chatToNameObj.Id;
        chatObj.SentDateTime = DateTime.UtcNow;

        await chatProvider.SendMessageAsync(chatObj);

        chatObj = new MyProject.Model.Chat();

        newChat = false; //Setting it to false so it updates

        chatMessages = await chatProvider.RetrieveTextsOrdered(userNameObj, chatToNameObj);
    }

    private async Task DeleteMessage(MyProject.Model.Chat chat)
    {
        await chatProvider.DeleteMessageAsync(chat); //delete func
        chatMessages = await chatProvider.RetrieveTextsOrdered(userNameObj, chatToNameObj); //refresh
        if (chatMessages.Count == 0)
        {
            newChat = true;
        }

    }

}