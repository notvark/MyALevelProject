@page "/Home/Profile/{userName}"

@using MyProject.Context
@using MyProject.Model;
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore;
@inherits LayoutComponentBase

@inject PostProvider postProvider
@inject PostCommentProvider postCommentProvider
@inject DatabaseContext DatabaseContext;
@inject UserManager<User> userManager
@inject IHttpContextAccessor httpContextAccessor
@inject NavigationManager NavigationManager
@inject FollowingProvider followingProvider
@inject DatabaseContext DbContext

<div class="container mt-4 custom">

    <!-- Profile Card -->
    <div class="card border-0">
        <div class="card-body custom-primary-background-color">
            <div class="row align-items-center">

                <!-- Profile Picture -->
                <div class="col-auto">
                    <img src="@(!string.IsNullOrEmpty(searchedUser.ProfilePicture) ? searchedUser.ProfilePicture : "/Images for R2_0/Default_pfp.png")"
                         alt="@searchedUser.UserName" class="rounded-circle me-3" style="width: 150px; height: 150px;">
                </div>

                <!-- User Information and Stats -->
                <div class="col">

                    <div class="custom-primary-white-text-color">
                        <h2 class="mb-1">@searchedUser.UserName</h2>
                        <p class="mb-3">@(!string.IsNullOrEmpty(searchedUser.Biography) ? searchedUser.Biography : "[NULL]")</p>
                    </div>

                    <!-- Stats Section -->
                    <div class="d-flex gap-5">

                        <!-- Followers -->
                        <div class="custom-primary-white-text-color text-center">
                            <h5 class="mb-0">Followers</h5>
                            <p class="mb-0">@searchedUser.FollowedUsers.Count()</p>
                        </div>

                        <!-- Following -->
                        <div class="custom-primary-white-text-color text-center">
                            <h5 class="mb-0">Following</h5>
                            <p class="mb-0">@searchedUser.FollowingUsers.Count()</p>
                        </div>

                    </div>

                    <!-- Follow Button -->
                    <div class="col-12 d-flex justify-content-end mt-4 gap-2">
                        @if (searchedUser != currentUserObj)
                        {
                            @if (!isUserFollowing)
                            {
                                <button class="btn btn-primary" @onclick="() => HandleFollow(currentUserObj, searchedUser)">Follow</button>
                            }
                            else
                            {
                                <button class="btn btn-danger" @onclick="() => HandleUnfollow(currentUserObj, searchedUser)">Unfollow</button>
                            }

                            <!-- Chat Button -->

                            <button class="btn btn-success" @onclick="() => HandleChatRedirect(searchedUser)">Chat</button>
                        }
                    </div>

                </div>

            </div>
        </div>
    </div>

</div>


@code {
    private User currentUserObj;
    private User searchedUser = new User();
    private string feedbackMessage;
    private bool isSuccessful;
    private List<User> userFollowing; //users the user is following
    private List<User> userFollowers; //followers of user
    private bool isUserFollowing;

    [Parameter]
    public string userName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var context = httpContextAccessor.HttpContext;

        if (context != null && context.User.Identity != null && context.User.Identity.IsAuthenticated)
        {
            var currentUser = await userManager.GetUserAsync(context.User); //await to actually get the User object

            if (currentUser != null)
            {
                currentUserObj = currentUser;
            }
        }

        searchedUser = await userManager.FindByNameAsync(userName); //gets the user object from the userManager
        searchedUser = DbContext.Users.Include(u => u.FollowedUsers).Include(u => u.FollowingUsers).SingleOrDefault(u => u.Id == searchedUser.Id);
        //updated version of user retriever, this time from db
        await DetermineWhetherCurrentUserFollows(currentUserObj, searchedUser);
    }

    private async Task DetermineWhetherCurrentUserFollows(User user, User searchedUser)
    {
        isUserFollowing = followingProvider.IsUserFollowingSearchedUser(user, searchedUser);
    }

    private async Task HandleFollow(User user, User searchedUser)
    {
        var followerObject = new Follower
            {
                User = searchedUser, //the user being followed
                UserId = searchedUser.Id, //id of user being followed
                FollowingUser = currentUserObj, //current user
                FollowingUserId = currentUserObj.Id //id of current user
            };

        await followingProvider.Follow(followerObject, searchedUser);
        //add follower relationship to the data through followingProvider
        await DetermineWhetherCurrentUserFollows(user, searchedUser);
        //updates the current user's following status 
    }

    private async Task HandleUnfollow(User user, User searchedUser)
    {
        var followerObject = new Follower
            {
                User = searchedUser, //the user being followed
                UserId = searchedUser.Id, //id of user being followed
                FollowingUser = currentUserObj, //current user
                FollowingUserId = currentUserObj.Id //id of current user
            };

        //remove follower relationship to the data through followingProvider
        await followingProvider.Unfollow(followerObject, searchedUser);
        //updates the current user's following status
        await DetermineWhetherCurrentUserFollows(user, searchedUser);
    }

    private async Task HandleChatRedirect(User searchedUser)
    {
        NavigationManager.NavigateTo($"/Home/Chat/{currentUserObj.Id}/{searchedUser.Id}");
    }


}
